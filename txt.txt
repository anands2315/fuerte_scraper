const puppeteer = require("puppeteer");

const scrapeInfiniteScrollItems = async (page, itemTargetCount) => {
    let items = [];
    let previousHeight;

    while (itemTargetCount > items.length) {
        items = await page.evaluate(() => {
            const imgs = Array.from(document.querySelectorAll('article img'));
            return imgs.map(img => img.src);
        });

        previousHeight = await page.evaluate('document.body.scrollHeight');
        await page.evaluate('window.scrollTo(0, document.body.scrollHeight)');

        try {
            await page.waitForFunction(`document.body.scrollHeight > ${previousHeight}`, { timeout: 10000 });
        } catch (e) {
            console.log('Timeout reached or no more content to load.');
            break;
        }

        // Adjust the waiting time based on network speed and content load speed
        await new Promise(resolve => setTimeout(resolve, 3000)); // Wait for 3 seconds
    }

    console.log(items);

    return items.slice(0, itemTargetCount); // Return up to the specified number of items
};

(async () => {
    const browser = await puppeteer.launch({
        headless: false, // Change to true for production use
    });

    const page = await browser.newPage();
    await page.goto("https://www.pexels.com/search/HD%20wallpaper/", { waitUntil: 'networkidle2' });

    const items = await scrapeInfiniteScrollItems(page, 100);

    console.log(`Extracted ${items.length} items`);
    await browser.close();
})();
